// This file was generated by counterfeiter
package actionsfakes

import (
	"sync"

	"github.com/pivotal-cf/reconfigure-pipeline/actions"
)

type FakeReconfigurer struct {
	ReconfigureStub        func(target, pipeline, configPath, variablesPath string) error
	reconfigureMutex       sync.RWMutex
	reconfigureArgsForCall []struct {
		target        string
		pipeline      string
		configPath    string
		variablesPath string
	}
	reconfigureReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReconfigurer) Reconfigure(target string, pipeline string, configPath string, variablesPath string) error {
	fake.reconfigureMutex.Lock()
	fake.reconfigureArgsForCall = append(fake.reconfigureArgsForCall, struct {
		target        string
		pipeline      string
		configPath    string
		variablesPath string
	}{target, pipeline, configPath, variablesPath})
	fake.recordInvocation("Reconfigure", []interface{}{target, pipeline, configPath, variablesPath})
	fake.reconfigureMutex.Unlock()
	if fake.ReconfigureStub != nil {
		return fake.ReconfigureStub(target, pipeline, configPath, variablesPath)
	} else {
		return fake.reconfigureReturns.result1
	}
}

func (fake *FakeReconfigurer) ReconfigureCallCount() int {
	fake.reconfigureMutex.RLock()
	defer fake.reconfigureMutex.RUnlock()
	return len(fake.reconfigureArgsForCall)
}

func (fake *FakeReconfigurer) ReconfigureArgsForCall(i int) (string, string, string, string) {
	fake.reconfigureMutex.RLock()
	defer fake.reconfigureMutex.RUnlock()
	return fake.reconfigureArgsForCall[i].target, fake.reconfigureArgsForCall[i].pipeline, fake.reconfigureArgsForCall[i].configPath, fake.reconfigureArgsForCall[i].variablesPath
}

func (fake *FakeReconfigurer) ReconfigureReturns(result1 error) {
	fake.ReconfigureStub = nil
	fake.reconfigureReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReconfigurer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.reconfigureMutex.RLock()
	defer fake.reconfigureMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeReconfigurer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ actions.Reconfigurer = new(FakeReconfigurer)
