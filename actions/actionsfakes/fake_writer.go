// This file was generated by counterfeiter
package actionsfakes

import (
	"sync"

	"github.com/pivotal-cf/reconfigure-pipeline/actions"
)

type FakeWriter struct {
	WriteStub        func(content string) (string, error)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		content string
	}
	writeReturns struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWriter) Write(content string) (string, error) {
	fake.writeMutex.Lock()
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		content string
	}{content})
	fake.recordInvocation("Write", []interface{}{content})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(content)
	} else {
		return fake.writeReturns.result1, fake.writeReturns.result2
	}
}

func (fake *FakeWriter) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeWriter) WriteArgsForCall(i int) string {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.writeArgsForCall[i].content
}

func (fake *FakeWriter) WriteReturns(result1 string, result2 error) {
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeWriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeWriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ actions.Writer = new(FakeWriter)
